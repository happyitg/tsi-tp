<?php

namespace DoctrineORMModule\Proxy\__CG__\MoviesData\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Movie extends \MoviesData\Model\Movie implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'id', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'title', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'launchDate', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'synopsis', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'note', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'creationDate', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'modificationDate', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'movieType', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'comments', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'moviePeopleSkill', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'poster'];
        }

        return ['__isInitialized__', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'id', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'title', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'launchDate', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'synopsis', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'note', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'creationDate', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'modificationDate', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'movieType', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'comments', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'moviePeopleSkill', '' . "\0" . 'MoviesData\\Model\\Movie' . "\0" . 'poster'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Movie $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getComments(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setComments(int $comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComments', [$comments]);

        return parent::setComments($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function getMoviePeopleSkill(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMoviePeopleSkill', []);

        return parent::getMoviePeopleSkill();
    }

    /**
     * {@inheritDoc}
     */
    public function setMoviePeopleSkill(int $moviePeopleSkill)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMoviePeopleSkill', [$moviePeopleSkill]);

        return parent::setMoviePeopleSkill($moviePeopleSkill);
    }

    /**
     * {@inheritDoc}
     */
    public function getPoster(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPoster', []);

        return parent::getPoster();
    }

    /**
     * {@inheritDoc}
     */
    public function setPoster(int $poster)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPoster', [$poster]);

        return parent::setPoster($poster);
    }

    /**
     * {@inheritDoc}
     */
    public function getMovieType(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMovieType', []);

        return parent::getMovieType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMovieType(int $movieType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMovieType', [$movieType]);

        return parent::setMovieType($movieType);
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(int $id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle(string $title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getLaunchDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLaunchDate', []);

        return parent::getLaunchDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setLaunchDate(\DateTime $launchDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLaunchDate', [$launchDate]);

        return parent::setLaunchDate($launchDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getSynopsis(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSynopsis', []);

        return parent::getSynopsis();
    }

    /**
     * {@inheritDoc}
     */
    public function setSynopsis(string $synopsis)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSynopsis', [$synopsis]);

        return parent::setSynopsis($synopsis);
    }

    /**
     * {@inheritDoc}
     */
    public function getNote(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNote', []);

        return parent::getNote();
    }

    /**
     * {@inheritDoc}
     */
    public function setNote(int $note)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNote', [$note]);

        return parent::setNote($note);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationDate', []);

        return parent::getCreationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationDate(\DateTime $creationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationDate', [$creationDate]);

        return parent::setCreationDate($creationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getModificationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModificationDate', []);

        return parent::getModificationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setModificationDate(\DateTime $modificationDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModificationDate', [$modificationDate]);

        return parent::setModificationDate($modificationDate);
    }

}
